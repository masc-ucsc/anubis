/*
 * This file belongs to the Galois project, a C++ library for exploiting parallelism.
 * The code is being released under the terms of the 3-Clause BSD License (a
 * copy is located in LICENSE.txt at the top-level directory).
 *
 * Copyright (C) 2018, The University of Texas at Austin. All rights reserved.
 * UNIVERSITY EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES CONCERNING THIS
 * SOFTWARE AND DOCUMENTATION, INCLUDING ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR ANY PARTICULAR PURPOSE, NON-INFRINGEMENT AND WARRANTIES OF
 * PERFORMANCE, AND ANY WARRANTY THAT MIGHT OTHERWISE ARISE FROM COURSE OF
 * DEALING OR USAGE OF TRADE.  NO WARRANTY IS EITHER EXPRESS OR IMPLIED WITH
 * RESPECT TO THE USE OF THE SOFTWARE OR DOCUMENTATION. Under no circumstances
 * shall University be liable for incidental, special, indirect, direct or
 * consequential damages or loss of profits, interruption of business, or
 * related expenses which may arise from use of Software or Documentation,
 * including but not limited to those resulting from defects in Software and/or
 * Documentation, or loss or inaccuracy of data of any kind.
 */

#include "galois/Galois.h"
#include "galois/Reduction.h"
#include "galois/Timer.h"
#include "Metis.h"
#include "galois/AtomicHelpers.h"
#include <set>
#include <iostream>
#include <fstream>

namespace {

// This is only used on the terminal graph (find graph)
// Should workd for hmetis
bool isBoundary(GGraph& g, GNode n) {
  auto c = g.edges(n).begin();
  GNode dst = g.getEdgeDst(*c);
  unsigned int nPart = g.getData(dst).getPart();
  for (auto jj : g.edges(n)) 
    if (g.getData(g.getEdgeDst(jj)).getPart() != nPart)
      return true;
    
  return false;
}

void findBoundary(GNodeBag& bag, GGraph& cg) {

  galois::do_all(galois::iterate(cg.getNets()),
                 [&](GNode n) {
                   if (isBoundary(cg, n))
                     bag.push(n);
                 },
                 galois::loopname("findBoundary"));
}

int calculate_cutsize(GGraph& g) {

  GNodeBag bag;
  galois::do_all(galois::iterate(g.getNets()),
        [&](GNode n) {
            auto c = g.edges(n).begin();
            GNode cn = g.getEdgeDst(*c);
            int part = g.getData(cn).getPart();
            for (auto x : g.edges(n)) {
              auto cc = g.getEdgeDst(x);
              int partc = g.getData(cc).getPart();
              if (partc != part) {
                bag.push(n);
                return;
              }
            }
        },
        galois::loopname("cutsize"));
  return std::distance(bag.begin(), bag.end());
}

int calculate_cutsize(GGraph& g, std::map<GNode, unsigned> part) {

  GNodeBag bag;
  galois::do_all(galois::iterate(g.getNets()),
        [&](GNode n) {
            auto c = g.edges(n).begin();
            GNode cn = g.getEdgeDst(*c);
            unsigned ppart = part[cn];
            for (auto x : g.edges(n, galois::MethodFlag::UNPROTECTED)) {
              auto cc = g.getEdgeDst(x);
              unsigned partc = part[cc];
              if (partc != ppart) {
                bag.push(n);
                return;
              }
            }
        },
        galois::steal(), galois::loopname("cutsize"));
  return std::distance(bag.begin(), bag.end());
}
void projectPart(MetisGraph* Graph) {
  GGraph* fineGraph   = Graph->getFinerGraph()->getGraph();
  GGraph* coarseGraph = Graph->getGraph();
  galois::do_all(galois::iterate(fineGraph->cellList()),
                 [&](GNode n) {
                   auto parent = fineGraph->getData(n).getParent();
                   auto cn      = coarseGraph->getData(parent);
                   unsigned part = cn.getPart();
                   fineGraph->getData(n).setPart(part);
                 },
                 galois::loopname("project"));
}

void initGain(GGraph& g) {

  galois::do_all(galois::iterate(g.cellList()),
        [&](GNode n) {
              g.getData(n).FS.store(0);
              g.getData(n).TE.store(0);
        },
        galois::loopname("initGain"));
  galois::do_all(galois::iterate(g.getNets()),
        [&](GNode n) {
            g.getData(n).parts.clear();
            for (auto x : g.edges(n)) {
              auto cc = g.getEdgeDst(x);
              int part = g.getData(cc).getPart();
              g.getData(n).parts[part]++;
            }
        },
        galois::loopname("initGain"));

  galois::do_all(galois::iterate(g.getNets()),
        [&](GNode n) {
            for (auto x : g.edges(n)) {
              auto cc = g.getEdgeDst(x);
              int part = g.getData(cc).getPart();
              int nodep = g.getData(n).parts[part];
              if (nodep == 1) 
                  galois::atomicAdd(g.getData(cc).FS, 1);
              int tmp = 0;
              for (int i = 0; i < g.getData(n).parts.size(); i++)
                  if (part != g.getData(n).parts[i]) tmp++;
              if (tmp == 0) 
                  galois::atomicAdd(g.getData(cc).TE, 1);
            }
        },
        galois::loopname("FETS"));    
}

int gain(GGraph& g, GNode n) {
  int retval         = 0;
  unsigned int nPart = g.getData(n).getPart();
  for (auto ii : g.edges(n)) {
    GNode neigh = g.getEdgeDst(ii);
    if (g.getData(neigh).getPart() == nPart)
      retval -= g.getEdgeData(ii);
    else
      retval += g.getEdgeData(ii);
  }
  return retval;
}

std::pair<int, GNode> flip_pair(const std::pair<GNode, int> &p) {
  return std::pair<int, GNode>(p.second, p.first);
}

std::multimap<int, GNode> flip_map(const std::map<GNode, int>& src)
{
  std::multimap<int, GNode> dst;
  std::transform(src.begin(), src.end(), std::inserter(dst, dst.begin()), flip_pair);
  return dst;
}

std::pair<int, int> gain_cut(GNode n, unsigned part, GGraph& g) {
  unsigned changed = 0;
  int gain = 0;
  for (auto cell : g.edges(n)) {
      auto c = g.getEdgeDst(cell);
      unsigned pp = g.getData(c).getPart();
      if (pp == part) continue;
      changed++;
      for (auto x : g.getNets(c)) {
        if (x == n) continue;
        unsigned dist = 0;
        unsigned cuts = 0;
        for (auto cc : g.edges(x)) {
          auto cx = g.getEdgeDst(cc);
          if (g.findEdge(cx, n) != g.edge_end(cx)) continue;
          unsigned bae = g.getData(cx).getPart();
          dist++;
          if (bae != part) cuts++;
        }
        if (cuts == 0) gain++; 
        else if (dist == cuts) gain--;
      }
  }

  return std::make_pair(gain, changed);
}

void pgain(GNodeBag& bag, GGraph& g) {
    //galois::do_all(galois::iterate(bag),
      //      [&](GNode n) {
      for (auto n : bag) {
      int val = 0;
      unsigned int nPart = g.getData(n).getPart();
      for (auto net : g.edges(n, galois::MethodFlag::UNPROTECTED)) {
        auto cell = g.getEdgeDst(net);
        for (auto c : g.edges(cell, galois::MethodFlag::UNPROTECTED)) {
          auto cc = g.getEdgeDst(c);
          if (g.getData(cc).getPart() == nPart) val--;
          else val ++;
        }
      }
      g.getData(n).gain = val - g.getData(n).counter;
      }
      //},
    // galois::loopname("gain"));
   
}

void pgain(GGraph& g) {
    //galois::do_all(galois::iterate(g.cellList()),
    //            [&](GNode n) {
    for (auto n : g.cellList()) {
    int val = 0;
    unsigned int nPart = g.getData(n).getPart();
    for (auto net : g.edges(n, galois::MethodFlag::UNPROTECTED)) {
      auto cell = g.getEdgeDst(net);
      for (auto c : g.edges(cell, galois::MethodFlag::UNPROTECTED)) {
        auto cc = g.getEdgeDst(c);
        if (g.getData(cc).getPart() == nPart) val--;
        else val ++;
      }
    }
    g.getData(n).gain = val;
    }
  //},
  //galois::loopname("calculateGain"));

}

void unlock(GGraph& g) {
    galois::do_all(galois::iterate(g.cellList()),
                [&](GNode n) {
    g.getData(n).setLocked(false);
  },
  galois::loopname("unlock"));

}

// find the boundary in parallel 
// sort the boundary in parallel
// swap in parallel using for_each (find the smallest and go over that)
void refine_by_swap(GGraph& g, float tol) {

  typedef galois::gstl::Vector<unsigned> VecTy;
  typedef galois::substrate::PerThreadStorage<VecTy> ThreadLocalData;
  ThreadLocalData edgesThreadLocal;

  typedef galois::worklists::PerSocketChunkFIFO<8> Chunk;
  unsigned Size = std::distance(g.cellList().begin(), g.cellList().end());

  galois::GAccumulator<unsigned int> accum;
  galois::GAccumulator<unsigned int> nodeSize;
  galois::do_all(galois::iterate(g.cellList()), 
  [&](GNode n) {
     nodeSize += g.getData(n).getWeight();
     if (g.getData(n).getPart() > 0)
       accum += g.getData(n).getWeight();
  },
  galois::loopname("make balance"));
  //std::cout<<"weight of 0 : "<< nodeSize.reduce() - accum.reduce()<<"  1: "<<accum.reduce()<<"\n";
  const int hi = (1 + tol) * nodeSize.reduce() / (2 + tol);
  const int lo = nodeSize.reduce() - hi;
  int bal = accum.reduce();
  int pass = 0;
  int changed = 0;
  std::cout<<"cut  "<<calculate_cutsize(g)<<"\n";
  while (pass < 100) {
    initGain(g);
    GNodeBag bag;
    findBoundary(bag, g);
    std::vector<GNode> nodeListz;
    std::vector<GNode> nodeListo;
    std::set<GNode> nodelistz;
    std::set<GNode> nodelisto;
    unsigned zeroW = 0;
    unsigned oneW = 0;
    for (auto b : bag) {
      for (auto c : g.edges(b)) {
        auto node = g.getEdgeDst(c);
        if (g.getData(node).isLocked()) continue;
        int gainz = g.getData(node).FS - g.getData(node).TE;
        if (gainz < 0) continue;
        unsigned pp = g.getData(node).getPart();
        if (pp == 0) {
          nodelistz.insert(node);
          zeroW += g.getData(node).getWeight();
        }
        else {
          nodelisto.insert(node);
          oneW += g.getData(node).getWeight();
        }
      }
    }
    for (auto x : nodelisto) nodeListo.push_back(x);
    for (auto x : nodelistz) nodeListz.push_back(x);

    std::sort(nodeListz.begin(), nodeListz.end(), [&g] (GNode& lpw, GNode& rpw) {
      if (g.getData(lpw).FS - g.getData(lpw).TE == g.getData(rpw).FS - g.getData(rpw).TE) return g.getData(lpw).nodeid < g.getData(rpw).nodeid;
      return (g.getData(lpw).FS - g.getData(lpw).TE) / g.getData(lpw).getWeight() > (g.getData(rpw).FS - g.getData(rpw).TE) / g.getData(rpw).getWeight();
    });
    std::sort(nodeListo.begin(), nodeListo.end(), [&g] (GNode& lpw, GNode& rpw) {
      if (g.getData(lpw).FS - g.getData(lpw).TE == g.getData(rpw).FS - g.getData(rpw).TE) return g.getData(lpw).nodeid < g.getData(rpw).nodeid;
      return (g.getData(lpw).FS - g.getData(lpw).TE) /   g.getData(lpw).getWeight() > (g.getData(rpw).FS - g.getData(rpw).TE) / g.getData(rpw).getWeight();
    });

    unsigned sizez = nodeListz.size();
    unsigned sizeo = nodeListo.size();
   // std::cout<<"size of z "<<sizez<<" "<<sizeo<<"\n";
    unsigned z = 0, o = 0;
    GNodeBag bbag;
    //while (1) {
      //if (z < sizez && o < sizeo) {
    int zw = 0;
    int ow = 0;
    if (zeroW <= oneW) {
      int i = 0;
      for (auto zz : nodeListz) {
        //auto zz = nodeListz.at(i);
        int gainz = g.getData(zz).FS - g.getData(zz).TE;
        if (gainz <= 3) break;
        //std::cout<<gainz<<"\n";
        bbag.push_back(zz);
        zw += g.getData(zz).getWeight();
        i++;
        if (i > sqrt(Size)) break;
      }
      //std::cout<<"zw "<<zw<<"\n";
      // unsigned j = 0;
     // unsigned ow = 0;
      auto ooo = nodeListo.begin();
      while (ow < zw && ooo != nodeListo.end()) {
        auto oo = *ooo;
        bbag.push_back(oo);
        ow += g.getData(oo).getWeight();
        bbag.push_back(oo);
        ++ooo;
      }
     }
     else {
        int i = 0;
        for (auto oo : nodeListo) {
           //auto oo = nodeListo.at(i);
           int gaino = (g.getData(oo).FS - g.getData(oo).TE);
           if (gaino <= 3) break;
           bbag.push_back(oo);
           ow += g.getData(oo).getWeight();
           i++;
           if (i > sqrt(Size)) break;
        }
        unsigned j = 0;
        // unsigned zw = 0;
        auto ooo = nodeListz.begin();
        while (zw < ow && ooo != nodeListz.end()) {
           auto oo = *ooo;
           bbag.push_back(oo);
           zw += g.getData(oo).getWeight();
          // std::cout<<"ow "<<ow<<" "<<" size of zw "<<zw<<"\n";
           bbag.push_back(oo);
           ooo++;
           j++;
        }

     } // zw -> 0 to 1
       // ow -> 1 to 0
     int zch = 0, och = 0;
      // std::cout<<"zw and ow "<<zw <<" "<<ow<<"\n";
       if (zw < ow) {
          int ii = 0;
          for (auto c : bbag) {
            int p = g.getData(c).getPart();
            if (p == 0 && ii <= zw) {
              g.getData(c).setPart(1);
              och += g.getData(c).getWeight();
              ii += g.getData(c).getWeight();
              g.getData(c).setLocked(true);
            }
            else
              if (p == 1 && zch <= zw) {
                g.getData(c).setPart(0);
                zch += g.getData(c).getWeight();
                g.getData(c).setLocked(true);
              }
          } 
      }
      else {
        int ii = 0;
     //  std::cout<<"zw and ow "<<zw <<" "<<ow<<"\n";
        for (auto c : bbag) {
          int p = g.getData(c).getPart();
          if (p == 1 && ii < ow) {
            g.getData(c).setPart(0);
            ii += g.getData(c).getWeight();
            zch += g.getData(c).getWeight();
            g.getData(c).setLocked(true);
          }
          else 
            if (p == 0 && och < ow) {
              g.getData(c).setPart(1);
              och += g.getData(c).getWeight();
              g.getData(c).setLocked(true);
            }
        } 
      }
   // if (zch != 0 || och != 0)
   // std::cout<<"0 weight added "<<zch<<" 1 weight added "<<och<<"\n"; 
    
    pass++;
    if (zch == 0 || och == 0) break;
  }
    std::cout<<changed<<"\n";
    std::cout<<"cut size "<<calculate_cutsize(g)<<"\n";
  /*galois::for_each(
    galois::iterate(nodeList), // go over cells with the highest gain first
    [&](GNode n, auto& cnx) {
      auto& nd         = g.getData(n);
      unsigned curpart = nd.getPart();
      unsigned newpart = 0;
      if (bal < hi)
        return;
      if (curpart != newpart) {
        nd.setPart(newpart);
          //bal--;
        __sync_fetch_and_sub(&bal, curpart);

      }
    //   }
    },
    galois::loopname("make balance"), galois::wl<galois::worklists::Deterministic<> >());
  }
   // more 1s 
  if (hi < bal) {
    galois::for_each(
        galois::iterate(nodeList), // go over cells with the highest gain first
        [&](GNode n, auto& cnx) {
     //  for (auto n : nodeList) {
          auto& nd         = g.getData(n);
          unsigned curpart = nd.getPart();
          unsigned newpart = 0;
          if (bal < hi)
            return;
          if (curpart != newpart) {
            nd.setPart(newpart);
            //bal--;
            __sync_fetch_and_sub(&bal, curpart);

          }
    //   }
        },
      galois::loopname("make balance"), galois::wl<galois::worklists::Deterministic<> >());
  }

  else if (bal < lo) {
    galois::for_each(
        galois::iterate(nodeList), // go over cells with the highest gain first
        [&](GNode n, auto& cnx) {
  //for (auto n : nodeList) {
          auto& nd         = g.getData(n);
          unsigned curpart = nd.getPart();
          unsigned newpart = 1;
          if (lo < bal)
            return;
          if (curpart != newpart) {
            nd.setPart(newpart);
           // bal++;
            __sync_fetch_and_add(&bal, newpart);
          }
  //}
        },
      galois::loopname("make balance"), galois::wl<galois::worklists::Deterministic<> >());
  }
  //std::cout<<"cut size is "<<calculate_cutsize(g)<<"\n";
  int pass = 0;
  int cut = 0;
  while (pass < 2) {
    GNodeBag boundary, zero, one;
    parallelBoundarySwap(boundary, g, nodeList);
    pgain(boundary, g);

    //sort the boundary in parallel
    galois::do_all(
      galois::iterate(boundary), 
      [&](GNode n) {
        unsigned part = g.getData(n).getPart();
        if (part == 0) zero.push(n);
        else one.push(n);
      },
    galois::loopname("refine"));
    std::vector<GNode> zeros;
    std::vector<GNode> ones;
    for (auto n : zero) zeros.push_back(n);
    for (auto n : one) ones.push_back(n);
    std::sort(ones.begin(), ones.end(), [&g] (GNode& lpw, GNode& rpw) {
    if (g.getData(lpw).gain == g.getData(rpw).gain) return g.getData(lpw).nodeid < g.getData(rpw).nodeid;
      return g.getData(lpw).gain > g.getData(rpw).gain;
    });


    std::sort(zeros.begin(), zeros.end(), [&g] (GNode& lpw, GNode& rpw) {
    if (g.getData(lpw).gain == g.getData(rpw).gain) return g.getData(lpw).nodeid < g.getData(rpw).nodeid;
      return g.getData(lpw).gain > g.getData(rpw).gain;
    });
    int zcount = 0;
    int ocount = 0;
    if (zeros.size() >= ones.size()) {
      galois::do_all(galois::iterate(ones),
              [&](GNode n) {
                int indx = std::distance(ones.begin(), find(ones.begin(), ones.end(), n));
                int gain = g.getData(n).gain + g.getData(zeros[indx]).gain;
                if (gain > 0) {
                  ocount++;
                  g.getData(n).setPart(0);
                  g.getData(zeros[indx]).setPart(1);
                  g.getData(n).counter++;
                  g.getData(zeros[indx]).counter++;
                } 
              },
              galois::loopname("swap"));
       }
    else {
      galois::do_all(galois::iterate(zeros),
              [&](GNode n) {
                int indx = std::distance(zeros.begin(), find(zeros.begin(), zeros.end(), n));
                int gain = g.getData(n).gain + g.getData(ones[indx]).gain;
                if (gain > 0) {
                  zcount++;
                  g.getData(n).setPart(1);
                  g.getData(ones[indx]).setPart(0);
                  g.getData(n).counter++;
                  g.getData(ones[indx]).counter++;
                } 
              },
              galois::loopname("swap"));
    }
    pass++;
  }
  */
unlock(g);
}

unsigned hash(unsigned int val)
{
  val = ((val >> 16) ^ val) * 0x45d9f3b;
  val = ((val >> 16) ^ val) * 0x45d9f3b;
  return (val >> 16) ^ val;
}

int reRefine(GGraph& g, const float tol) {
  
    unsigned nodeSize = std::distance(g.cellList().begin(), g.cellList().end());
    //unsigned netSize = std::distance(g.getNets().begin(), g.getNets().end());
    const int hi = (1 + tol) * nodeSize / (2 + tol);
    const int lo = nodeSize - hi;
    std::map<GNode, unsigned> part;


    galois::do_all(
      galois::iterate(g.getNets()),
      [&](GNode n) {
        for (auto c : g.out_edges(n)) {
           auto cc = g.getEdgeDst(c);
           galois::atomicAdd(g.getData(cc).cnt, 1);
        }
      },
    galois::loopname("refine_cnt"));

    int prevbest, bestcut = INT_MAX;
    do {
      prevbest = bestcut;
      int bal = 0;

      galois::GAccumulator<unsigned int> accum;
      galois::do_all(galois::iterate(g.cellList()), 
            [&](GNode n) {
            g.getData(n).icnt = 1.0f / g.getData(n).cnt;
               if (g.getData(n).getPart() > 0)
               accum += 1;
            g.getData(n).sum1 = g.getData(n).getPart() * 1 ? 1 :-1;
            g.getData(n).sum2 = 0;
      },
      galois::loopname("make balance"));

      bal = accum.reduce();

      int changes;
      do {
       const float ibal0 = 1.0f / (nodeSize - bal);
       const float ibal1 = 1.0f / bal;
        const float f0 = std::min(std::max(1.0f, lo * ibal0), hi * ibal0);
        const float f1 = std::min(std::max(1.0f, lo * ibal1), hi * ibal1);
        galois::do_all(
          galois::iterate(g.getNets()),
          [&](GNode n) {
            float sum = 0;
            unsigned len = std::distance(g.edge_begin(n, galois::MethodFlag::UNPROTECTED), g.edge_end(n, galois::MethodFlag::UNPROTECTED));
            for (auto c : g.edges(n, galois::MethodFlag::UNPROTECTED)) {
                auto cell = g.getEdgeDst(c);
                sum += g.getData(cell).sum1;
            }
            const float isizem1 = 1.0f / len;
            for (auto c : g.edges(n)) {
                auto cell = g.getEdgeDst(c);
                float off = (sum - g.getData(cell).sum1) * isizem1 * g.getData(cell).icnt;
                off *= (off < 0) ? f0 : f1;
                galois::atomicAdd(g.getData(cell).sum2, off);
            }
      },//galois::wl<galois::worklists::Deterministic<> >(),
      galois::steal(), galois::loopname("refine_off"));


      bal = 0;
      changes = 0;
      GNodeBag bag;
      galois::GAccumulator<unsigned int> accumb;
      galois::GAccumulator<unsigned int> accumc;

      galois::do_all(galois::iterate(g.cellList()), 
            [&](GNode c) {
            auto& cData = g.getData(c);
            if (cData.sum1 * cData.sum2 < 0.0f) 
              accumb += 1;//changes
            if (cData.sum2 > 0) {
              accumc += 1;//bal
              if (cData.getPart() == 0)
                bag.push(c);
            }
            else if (cData.getPart() == 1)
                bag.push(c);
            g.getData(c).sum1 = 0;
      },
      galois::loopname("changes"));
      initGain(g);
      GNodeBag bb;
      for (auto b : bag) {
        if (g.getData(b).FS - g.getData(b).TE > 0)
          bb.push(b);
      }
      bal = accumc.reduce();
     // bal = std::distance(bb.begin(), bb.end());
      changes = accumb.reduce();
      for (auto c : g.cellList()) {
          std::swap(g.getData(c).sum1, g.getData(c).sum2);
          part[c] = g.getData(c).getPart();
      }
      for (auto c : bb) {
          if (g.getData(c).getPart() == 0)
          part[c] = 1;
          else part[c] = 0;
      }
        
      int count = 0;
      if ((lo <= bal) && (bal <= hi)) {
          count = calculate_cutsize(g, part);
          if (bestcut > count) {
              bestcut = count;
      galois::do_all(
          galois::iterate(g.cellList()),
         [&](GNode c) {g.getData(c).setPart(part[c]);
      },
      galois::steal(), galois::loopname("refine_setPart"));
            }
        }
      } while (changes > nodeSize / 2048);
    } while (prevbest * 0.99 > bestcut);
    return bestcut;
}
int newRefine(GGraph& g, const float tol) {
  
    unsigned nodeSize = std::distance(g.cellList().begin(), g.cellList().end());
    //unsigned netSize = std::distance(g.getNets().begin(), g.getNets().end());
    const int hi = (1 + tol) * nodeSize / (2 + tol);
    const int lo = nodeSize - hi;
    std::map<GNode, unsigned> part;


    galois::do_all(
      galois::iterate(g.getNets()),
      [&](GNode n) {
        for (auto c : g.out_edges(n)) {
           auto cc = g.getEdgeDst(c);
           galois::atomicAdd(g.getData(cc).cnt, 1);
        }
      },
    galois::loopname("refine_cnt"));

    int prevbest, bestcut = INT_MAX;
    do {
      prevbest = bestcut;
      int bal = 0;

      galois::GAccumulator<unsigned int> accum;
      galois::do_all(galois::iterate(g.cellList()), 
            [&](GNode n) {
            g.getData(n).icnt = 1.0f / g.getData(n).cnt;
               if (g.getData(n).getPart() > 0)
               accum += 1;
            g.getData(n).sum1 = g.getData(n).getPart() * 1 ? 1 :-1;
            g.getData(n).sum2 = 0;
      },
      galois::loopname("make balance"));

      bal = accum.reduce();

      int changes;
      do {
       const float ibal0 = 1.0f / (nodeSize - bal);
       const float ibal1 = 1.0f / bal;
        const float f0 = std::min(std::max(1.0f, lo * ibal0), hi * ibal0);
        const float f1 = std::min(std::max(1.0f, lo * ibal1), hi * ibal1);
        galois::do_all(
          galois::iterate(g.getNets()),
          [&](GNode n) {
            float sum = 0;
            unsigned len = std::distance(g.edge_begin(n, galois::MethodFlag::UNPROTECTED), g.edge_end(n, galois::MethodFlag::UNPROTECTED));
            for (auto c : g.edges(n, galois::MethodFlag::UNPROTECTED)) {
                auto cell = g.getEdgeDst(c);
                sum += g.getData(cell).sum1;
            }
            const float isizem1 = 1.0f / len;
            for (auto c : g.edges(n)) {
                auto cell = g.getEdgeDst(c);
                float off = (sum - g.getData(cell).sum1) * isizem1 * g.getData(cell).icnt;
                off *= (off < 0) ? f0 : f1;
                galois::atomicAdd(g.getData(cell).sum2, off);
            }
      },//galois::wl<galois::worklists::Deterministic<> >(),
      galois::steal(), galois::loopname("refine_off"));


      bal = 0;
      changes = 0;
      GNodeBag bag;
      galois::GAccumulator<unsigned int> accumb;
      galois::GAccumulator<unsigned int> accumc;

      galois::do_all(galois::iterate(g.cellList()), 
            [&](GNode c) {
            auto& cData = g.getData(c);
            if (cData.sum1 * cData.sum2 < 0.0f) 
              accumb += 1;//changes
            if (cData.sum2 > 0) {
              accumc += 1;//bal
              if (cData.getPart() == 0)
                bag.push(c);
            }
            else if (cData.getPart() == 1)
                bag.push(c);
            g.getData(c).sum1 = 0;
      },
      galois::loopname("changes"));

      bal = accumc.reduce();
      changes = accumb.reduce();
      for (auto c : g.cellList()) {
          std::swap(g.getData(c).sum1, g.getData(c).sum2);
          part[c] = g.getData(c).getPart();
      }
      for (auto c : bag) {
          if (g.getData(c).getPart() == 0)
          part[c] = 1;
          else part[c] = 0;
      }
        
      int count = 0;
      if ((lo <= bal) && (bal <= hi)) {
          count = calculate_cutsize(g, part);
          if (bestcut > count) {
              bestcut = count;
      galois::do_all(
          galois::iterate(g.cellList()),
         [&](GNode c) {g.getData(c).setPart(part[c]);
      },
      galois::steal(), galois::loopname("refine_setPart"));
            }
        }
      } while (changes > nodeSize / 2048);
    } while (prevbest * 0.99 > bestcut);
    return bestcut;
}

} // namespace

void refine(MetisGraph* coarseGraph, std::vector<partInfo>& parts, unsigned minSize, unsigned maxSize, refinementMode refM, bool verbose) {
    std::cout<<"inside refine\n";
    int pass = 0 ;
    unsigned size = 0;//std::distance(coarseGraph->getGraph()->cellList().begin(), coarseGraph->getGraph()->cellList().end());
 /* auto ggg = coarseGraph->getGraph();
  int i = 0;
    for (auto c : ggg->cellList()) {
        int sign = hash(i + 1 * size) & 1;
        ggg->getData(c).setPart(sign);
        i++;
    }*/
    std::cout<<"cut size is "<<calculate_cutsize(*coarseGraph->getGraph())<<"\n";
    MetisGraph* fineG;
  do {
    fineG = coarseGraph;
   //   pass++;
    MetisGraph* fineGraph = coarseGraph->getFinerGraph();
  //  if (verbose) {
      std::cout << "Cut " << computeCut(*coarseGraph->getGraph())
                << " Weights ";
      // printPartStats(parts);
      std::cout << "\n";
   // }
  unsigned newsize  = std::distance(coarseGraph->getGraph()->cellList().begin(), coarseGraph->getGraph()->cellList().end());
    //unsigned netSize = std::distance(coarseGraph->getGraph()->getNets().begin(), coarseGraph->getGraph()->getNets().end());
  //signed char* const part = new signed char [size];
  auto gg = coarseGraph->getGraph();
  const float ratio = 55.0 / 45.0;  // change if needed
  const float tol = std::max(ratio, 1 - ratio) - 1;
 std::cout<<reRefine(*gg, tol)<<"\n";
//  for (int i = 0; i < 20; i++)
  //  refine_by_swap(*gg, tol);
    pass++;
    size = newsize;
    bool do_pro = true;
    if (fineGraph && do_pro) {
      projectPart(coarseGraph);
    }
   } while ((coarseGraph = coarseGraph->getFinerGraph()));
/*  std::ofstream ofs("out.2.txt");
  int one = 0;
  int zero = 0;
  std::map<int, int> cell;
  GGraph* g = fineG->getGraph();
  int mys = std::distance(g->cellList().begin(), g->cellList().end());
  for (auto c : g->cellList()) {
    int id = g->getData(c).nodeid;
    int p = g->getData(c).getPart();
    if (p == 1) one++;
    else zero++;
    cell[id] = p;
  }
  for (auto mm : cell) {
    ofs<<mm.second<<"\n";  
  }
  ofs.close();*/
}

